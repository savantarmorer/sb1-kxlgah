version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tournament.rule=Host(`tournament.yourdomain.com`)"
      - "traefik.http.routers.tournament.tls=true"
    deploy:
      replicas: 4
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_production_data:/data
    ports:
      - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]

  monitoring:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DATADOG_API_KEY}
      - DD_SITE=datadoghq.com
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro

  backup:
    image: redis:alpine
    volumes:
      - redis_production_data:/data:ro
    command: |
      sh -c 'while true; do
        redis-cli -h redis --requirepass ${REDIS_PASSWORD} SAVE
        tar czf /backup/redis-backup-$$(date +%Y%m%d-%H%M%S).tar.gz /data
        find /backup -type f -mtime +7 -delete
        sleep 86400
      done'
    volumes:
      - ./backups:/backup

volumes:
  redis_production_data:
    driver: rexray/ebs 